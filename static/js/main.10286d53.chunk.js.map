{"version":3,"sources":["Canvas/Canvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CanvasElement","inputColors","onCanvasDataChange","width","height","dataCanvas","useRef","document","createElement","visualisationCanvas","useEffect","colors","eval","data","getColorRamp","e","alert","ref","canvas","current","ctx","getContext","gradient","createLinearGradient","stop","hasOwnProperty","addColorStop","fillStyle","fillRect","Uint8Array","getImageData","style","margin","initValue","App","useState","inputStateTemp","setInputStateTemp","inputState","setInputState","outputState","setOutputState","className","padding","backgroundColor","minHeight","Container","maxWidth","noValidate","autoComplete","Grid","FormLabel","fontSize","TextareaAutosize","minRows","value","onChange","event","target","Button","variant","onClick","Canvas","preparedObjCString","String","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.10286d53.chunk.js","sourcesContent":["import React, {RefObject, useEffect, useRef} from 'react';\nimport {IRampColors} from \"../App\";\n\n\n\ninterface IProps {\n    inputColors: IRampColors;\n    onCanvasDataChange: (data: Uint8Array) => void;\n}\n\nfunction CanvasElement({inputColors, onCanvasDataChange}: IProps) {\n    const width = 256;\n    const height = 1;\n\n    const dataCanvas = useRef<HTMLCanvasElement>(document.createElement('canvas'));\n    const visualisationCanvas = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n        try {\n            if (!inputColors) {\n                return;\n            }\n\n            const colors = eval('(' + inputColors + ')');\n\n            const data = getColorRamp(colors, width, height, dataCanvas)!;\n            onCanvasDataChange(data);\n            getColorRamp(colors, width * 2, height * 40, visualisationCanvas);\n        } catch (e) {\n            alert(e);\n        }\n\n\n    }, [dataCanvas, inputColors]);\n\n\n    const getColorRamp = (colors: IRampColors, width: number, height: number, ref: RefObject<HTMLCanvasElement>): Uint8Array | undefined => {\n        const canvas = ref.current;\n\n        if (!canvas) {\n            return;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        const ctx = canvas.getContext('2d')!;\n\n        const gradient = ctx.createLinearGradient(0, 0, 256, 0);\n        for (const stop in colors) {\n            if (colors.hasOwnProperty(stop)) {\n                gradient.addColorStop(+stop, colors[stop]);\n            }\n        }\n\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, width, height);\n\n        return new Uint8Array(ctx.getImageData(0, 0, width, height).data);\n    }\n\n    return (\n        <canvas ref={visualisationCanvas} style={{\n            margin: '15px 0'\n        }}/>\n    );\n}\n\nexport default CanvasElement;\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Button, Container, FormLabel, Grid, TextareaAutosize} from \"@material-ui/core\";\nimport CanvasElement from \"./Canvas/Canvas\";\n\nexport interface IRampColors {\n    [key: number]: string;\n}\n\nconst initValue = `{\n      [0 / 255]: '#9a00bb',\n      [20 / 255]: '#1b0095',\n      [40 / 255]: '#038cbe',\n      [60 / 255]: '#5b8e19',\n      [80 / 255]: '#bc9203',\n      [100 / 255]: '#bd6004',\n      [120 / 255]: '#bd4b03',\n      [140 / 255]: '#bf3d01',\n      [160 / 255]: '#bd2802',\n      [180 / 255]: '#bf1401',\n      [200 / 255]: '#bf0300',\n      [255 / 255]: '#bf0300',\n    }`;\n\nfunction App() {\n    const [inputStateTemp, setInputStateTemp] = useState(initValue);\n    const [inputState, setInputState] = useState(initValue);\n    const [outputState, setOutputState] = useState('');\n\n    const handleCanvasDataChange = (data: Uint8Array) => {\n        const preparedObjCString = `int const customNameColorRamp[1024] = {${String(data)}};`\n        setOutputState(preparedObjCString);\n    }\n\n    return (\n        <div className=\"App\" style={{\n            padding: '15px 0',\n            backgroundColor: 'rgba(211, 211, 211, 0.15)',\n            minHeight: '100vh'\n        }}>\n            <Container maxWidth=\"sm\">\n                <form noValidate autoComplete=\"off\">\n                    <Grid style={{\n                        padding: '20px 0'\n                    }}>\n                        <FormLabel style={{\n                            fontSize: '25px'\n                        }}>Put here array of stops & colors</FormLabel>\n                        <TextareaAutosize\n                            minRows={10}\n                            value={inputStateTemp}\n                            style={{\n                                width: '100%',\n                                margin: '20px 0'\n                            }}\n                            onChange={(event) => setInputStateTemp(event.target.value)}\n                        />\n                        <Button variant={\"contained\"}\n                                onClick={() => {\n                                    setInputState(inputStateTemp);\n                                }}>\n                            Convert\n                        </Button>\n                    </Grid>\n                    <Grid>\n                        <CanvasElement inputColors={inputState} onCanvasDataChange={handleCanvasDataChange}/>\n                        <FormLabel style={{\n                            fontSize: '18px',\n                        }}>Copy this header to constants.h</FormLabel>\n                        <TextareaAutosize\n                            minRows={1}\n                            style={{\n                                width: '100%',\n                                margin: '20px 0'\n                            }}\n                            value={'extern int const customNameColorRamp[1024];'}\n                        />\n                        <FormLabel style={{\n                            fontSize: '18px'\n                        }}>Copy this variable to constants.m</FormLabel>\n                        <TextareaAutosize\n                            minRows={10}\n                            style={{\n                                width: '100%',\n                                margin: '20px 0'\n                            }}\n                            value={outputState}\n                        />\n                    </Grid>\n                </form>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}